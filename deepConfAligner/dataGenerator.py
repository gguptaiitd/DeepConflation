from Bio import SeqIO
import random
from keras.utils import to_categorical

series_length = 100
real_unmatched = 10
#encode according to codes generated by datapreprocessing in training
nucleotide2num = dict(zip("GACT",range(4)))


class mdict(dict):
    def __setitem__(self, key, value):
        """add the given value to the list of values for this key"""
        self.setdefault(key, []).append(value)

def generateHotVectorEncoding(data):
    label = list(map(lambda x: nucleotide2num[x], data))
    encoded = to_categorical(label, 4)
    return label

def readRealData():
    import pysam
    real_query = []
    real_ref = {}
    x = []
    y = []
    l = int(series_length/2)-1
    m = series_length - l
    count = 0
    #bam file against which accuracy is checked
    bamfile = pysam.AlignmentFile("/data/exaple.bam", "rb")
    for read in bamfile.fetch():
        if read.reference_start != -1:
            count += 1
            for (qu_pos, ref_pos) in read.aligned_pairs:
                if ref_pos is not None:
                    break
            real_query.append([read.query_sequence, read.blocks, (qu_pos,ref_pos)])
        if count > 10000:
            break
    bamfile.close()
    #sequence against which to align reads
    file = open("/reference/sequence.fasta", "r")
    for r in SeqIO.parse(file, "fasta"):
        ref_seq = r.seq
    file.close()
    for query_list in real_query:
        set = []
        z = []
        r_low, r_max = query_list[1][0]
        qu_pos, ref_pos = query_list[2]
        ref = ref_seq[r_low:r_low + series_length]
        if (r_max - r_low) > series_length:
            if qu_pos - l < 0:
                l = 0
                m = series_length
            r_hot = generateHotVectorEncoding(ref)
            q_hot = generateHotVectorEncoding(query_list[0][qu_pos-l:qu_pos+m])

            set.append(r_hot)
            z.append(1)

        unmatched_query = random.sample(real_query,real_unmatched)
        if query_list in unmatched_query:
            unmatched_query.remove(query_list)
        for u_q in unmatched_query:
            u_hot = generateHotVectorEncoding(u_q[0][:series_length])
            set.append(u_hot)
            z.append(0)

        r = random.random()
        random.shuffle(set, lambda: r)
        random.shuffle(z, lambda: r)
        x.append([q_hot,set])
        y.append([z])
    r = random.random()
    random.shuffle(x, lambda: r)
    random.shuffle(y, lambda: r)
    return x, y



